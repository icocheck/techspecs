@startuml
|Pandora Contract|
|Workers|

|Pandora Contract|
start

partition checkInputs {
  if (kernel.input_dim = dataset.dim) then (yes)
    if (client.deposit = kernel.job_complexity etc) then (yes)
    else (no)
      :error#2>
      end
    endif
  else (no)
    :error#1>
    end
  endif
}

partition startCognition {
  repeat

    :lottery|
    :cognitiveJobCreated/
    fork
      :waitingForResponses;
      detach
    fork again
      |Workers|
      start
      if (busy) then (yes)
        :busy>
      else (no)
        :downloadData]
        :checkData|
        :launchModel]
        :checkModel|
        if (everything is ok) then (no)
          :invalidData>
        else (yes)
          :ready>
        endif
      endif
    end fork

    |Pandora Contract|
    fork
      :workerResponse<
    fork again
      :workerResponse<
    fork again
      :...<
    end fork

    if (∃ response = invalidData) then (yes)
      :Invalid data arbitrage|
      end
    elseif (∃ response = busy) then (yes)
      :penaltyToWorker#1]
    elseif (noTries > N) then (yes)
      :paybackClient(noValidationDeposit)]
      :cognitiveJobCancelled(reason#1)/
      end
    else (timeout)
      :penaltyToWorker#2]
    endif
  repeat while (∀ responses = accept) is (no)
}

partition cognitiveMining {
  stop
}
@enduml
