@startuml
box "Client"
  actor "Client" as client
  participant "Client dApp" as dapp
end box

box "Distributed Data"
  entity "Pandora Contracts" as pandora
  database "IPFS" as ipfs
end box

box "Workers"
  collections "Worker Nodes" as workers
  control "Keras/TensorFlow" as nn
  collections "Validating Nodes" as validators
end box

== Client selects datasets and kernels ==

ref over client, dapp, pandora: Browsing market
client <<-->> dapp
dapp <<-->> pandora
ref over client
  Dataset and 
  kernel selected
end ref

|||

== Preprocessing Cognition Order ==

client -> dapp: createCognitiveWork
activate dapp
dapp ->> ipfs: donwload
activate ipfs
... donwloading ...
ipfs -->> dapp: << files >>
deactivate ipfs

dapp -> dapp: integrityCheck
dapp -> dapp: consistencyCheck
dapp -> dapp: batchSplit
dapp ->> ipfs: uploadBatches
activate ipfs
... uploading ...
ipfs -->> dapp: << addresses >>
deactivate ipfs

== Cognitive Order ==

dapp ->> pandora: orderCognition
activate pandora
create entity "Cognition Contract" as cognition
pandora ->> cognition: new
activate cognition
... mining transaction ...
cognition -->> pandora: << contract address >>
deactivate cognition

pandora -->> dapp: << contract address >>
deactivate pandora

dapp -->> pandora: startCognition
deactivate dapp
activate pandora

loop until all batches accepted by workers, but < N thimes
  |||
  ref over pandora: lottery
  pandora -> pandora: selectWorkers
  pandora -->> cognition: initWithWorkers
... mining transaction ...
  pandora -->> workers: << newJob >> event
  deactivate pandora

== Main Cognitive Work ==
  activate workers

  alt Active workers
    |||
    ref over pandora, nn: Cognition
    |||
  else Inactive workers (= no response within some timeframe)
    group repeat
    end
  end
end

== Sufficient amount of active workers not found ==

activate pandora
pandora -->> dapp: << contractFailed >> event
pandora -->> dapp: returnDeposit
deactivate pandora
|||
@enduml
